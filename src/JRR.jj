/**
 * JavaCC template file created by SF JavaCC plugin 1.5.17+ wizard for JavaCC 1.5.0+
 */
options
{
  JDK_VERSION = "1.5";
  static = true;
}

PARSER_BEGIN(JRR)
import java.util.ArrayList;

public class JRR
{
  public static ArrayList<String> symbol_table;
  public static void main(String args []) throws ParseException
  {
    JRR parser = new JRR(System.in);
    while (true)
    {
      System.out.println("Reading from standard input...");
      try
      {
        
        JRR.symbol_table = new ArrayList<String>();
        JRR.program();
        System.out.println("Successful Parsing.");
		for (String symb: symbol_table)
			System.out.println("Symbol :"+symb); 
           
      }
      catch(ParseException e){
        System.out.println("Fail Parsing");
        e.printStackTrace();
        break;
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        JRR.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
      
    }
  }
}

PARSER_END(JRR)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
| <"/*" (~["*"])* "*" ("*" | ~["*","/"] (~["*"])* "*")* "/">
}

TOKEN : /* OPERATORS */
{
//  < ADDOP : ["+","-"] >
//| < UNARYOP : ["-","!"] >
//| < MULOP : ["*","/","%"] >
//| < RELOP : < LESSERTHAN >|< GRATERTHAN > >
//|
< LBRACE : "{" >
| < RBRACE : "}" >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < LESSERTHAN : "<" >
| < GRATERTHAN : ">" >
}



TOKEN : // Reserved Words
{
  < BREAK:  "break" >
| < CONTINUE:  "continue" >
| < ELSE:  "else" >
| < IF:  "if" >
| < RETURN:  "return" >
| < WHILE:  "while" >
}

TOKEN : // ID and Digits
{
  < ID:  < LETTER >(< LETTER >|< DIGIT >)* >
| < #LETTER: ["a"-"z","A"-"Z","_"]>
| < INT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}




void program():{}
{
 { System.out.println("program1");}< LBRACE > (statement())* < RBRACE > <EOF>
}

void compound():{}
{
{ System.out.println("compound1");}< LBRACE > (statement())* < RBRACE > 
}

void statement():{}
{
  { System.out.println("statement1");} compound() { System.out.println("end1\n");}
| { System.out.println("statement2");} < WHILE > test() statement() { System.out.println("end2\n");}
| { System.out.println("statement3");} < IF > test() statement() (LOOKAHEAD(2) < ELSE > statement())? { System.out.println("end3\n");}
| { System.out.println("statement4");} expression() ";" { System.out.println("end4\n");}
| { System.out.println("statement5");} < BREAK >";" { System.out.println("end5\n");}
| { System.out.println("statement6");} < RETURN > expression()";" { System.out.println("end6\n");}
| { System.out.println("statement7");} < CONTINUE > ";" { System.out.println("end7\n");}
| { System.out.println("statement8");} ";" { System.out.println("end8\n");}
}

void test():{}
{
{ System.out.println("test");} < LPAREN > expression() < RPAREN > 
}

void expression():{}
{
  LOOKAHEAD(2)
   { System.out.println("expression1");} < ID > "=" expression() 
|  { System.out.println("expression2");} condition() 
}

void condition():{}
{
  { System.out.println("cond");} disjunction() ("?" expression() ":" condition() )?
//  LOOKAHEAD(3)
//  { System.out.println("cond1");} disjunction() 
//| { System.out.println("cond2");} disjunction() "?" expression() ":" condition() 
}

void disjunction():{}
{
{ System.out.println("disj");} conjunction() ("|" conjunction())*  
}

void conjunction():{}
{
  //LOOKAHEAD(3)
  { System.out.println("conj");} comparison() ("&" comparison() )*
//  { System.out.println("conj1");} comparison() 
//| { System.out.println("conj2");} conjunction() "&" comparison() 
}

void comparison():{}
{
  { System.out.println("comp");} relation() ("==" relation() )?
  //LOOKAHEAD(2)
//  { System.out.println("comp1");} relation() 
//| { System.out.println("comp2");} relation() "==" relation() 
}

void relation():{}
{
  { System.out.println("rel");} sum() (relop() sum())?
  //LOOKAHEAD(2)
//  { System.out.println("rel1");} sum() 
//| { System.out.println("rel2");} sum() < RELOP > sum()

}

void sum():{}
{
{ System.out.println("sum");} term()( addop() term())*
}

void term():{}
{
{ System.out.println("term");} factor() (mulop() factor())*
}

void factor():{}
{
  { System.out.println("fact1");} primary()
| { System.out.println("fact2");} unaryop() primary()
}
// E: E+T|T  becomes E: T(+T)*

void primary():{}
{
  { System.out.println("p1");} < ID >  {
    symbol_table.add(< ID >);  }
| { System.out.println("p2");} < INT >
| { System.out.println("p3");} < LPAREN > expression()< RPAREN > 
}

void relop():{}
{
  { System.out.println("r1");} < LESSERTHAN >
| { System.out.println("r2");} < GRATERTHAN >
}

void mulop():{}
{
  { System.out.println("m1");} "*"
| { System.out.println("m2");} "/"
| { System.out.println("m3");} "%"
}

void addop():{}
{
  { System.out.println("a1");} "-"
| { System.out.println("a2");} "+"
}

void unaryop():{}
{
  { System.out.println("u1");} "-"
| { System.out.println("u2");} "!"
}

